<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jvican</title>
    <link>https://jvican.github.io/</link>
    <description>Recent content on jvican</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Oct 2018 20:29:12 +0200</lastBuildDate>
    
	<atom:link href="https://jvican.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Overload methods with extra parameter lists</title>
      <link>https://jvican.github.io/post/implicit-parameter-overload/</link>
      <pubDate>Thu, 25 Oct 2018 20:29:12 +0200</pubDate>
      
      <guid>https://jvican.github.io/post/implicit-parameter-overload/</guid>
      <description>Have you ever asked yourself if you can enrich a method that you need to implement in a class to receive more information from the call site?
For example, let&amp;rsquo;s say you have method debug in a logger interface AbstractLogger. Can we implement the logger interface and at the same time overload debug with another version that takes more parameters every time the users of our API call debug?</description>
    </item>
    
    <item>
      <title>Profiling and reducing compile times of typeclass derivation</title>
      <link>https://jvican.github.io/post/scalac-profiling/</link>
      <pubDate>Sun, 20 May 2018 10:00:00 +0100</pubDate>
      
      <guid>https://jvican.github.io/post/scalac-profiling/</guid>
      <description>Today I write about how I&amp;rsquo;ve reduced compilation times of a project that uses typeclass derivation to create parsers for CLIs (command-line interfaces) with Shapeless.
Typeclass derivation makes a heavy use of macros and implicit search to reduce boilerplate and reduce code maintenance, but has a high cost on compile times.
In most of the cases, slow compilations of this common use case in the Scala community originate from either an unintentional misuse of a macro-based library, or inefficient macro implementations.</description>
    </item>
    
    <item>
      <title>How often do we change our sbt builds</title>
      <link>https://jvican.github.io/post/git-sbt-analysis/</link>
      <pubDate>Thu, 19 Oct 2017 23:29:12 +0200</pubDate>
      
      <guid>https://jvican.github.io/post/git-sbt-analysis/</guid>
      <description>I spend a lot of time thinking about build tools and popular setups, and what changes are more likely to impact developers positively. In one of these ramblings, one question popped up: &amp;ldquo;How often do we change our builds?&amp;rdquo;
It&amp;rsquo;s not easier to answer this question, data on the topic is scarce. So I challenged myself to come up with some data to satisfy my curiosity.
Next I show some of the data I collected from Scala projects using sbt, the most popular Scala build tool.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://jvican.github.io/about/</link>
      <pubDate>Tue, 28 Mar 2017 19:28:49 +0200</pubDate>
      
      <guid>https://jvican.github.io/about/</guid>
      <description>I work at the Scala Center at EPFL. I hack on tooling, primarly in compilers and build tools. My main focus is developer productivity.
I am also involved in the evolution of the Scala language as the Scala Improvement Process lead.
My work as a Scala contributor  Bloop, a fast compile/test server for Scala and Java. Zinc, the official Scala incremental compiler. sbt, one of the most popular Scala build tools.</description>
    </item>
    
    <item>
      <title>Informal introduction</title>
      <link>https://jvican.github.io/post/introduction/</link>
      <pubDate>Mon, 27 Mar 2017 23:29:12 +0200</pubDate>
      
      <guid>https://jvican.github.io/post/introduction/</guid>
      <description>Hello, I am Jorge. I hack on Scala dev tools at the Scala Center. Read on me here.
In this blog I talk about computers and software. From time to time, you may find me discussing about other fields: mathematics, game theory, behavioral economics, literature or philosophy &amp;ndash; but with less likelihood.
If you like my work, spread the word. That&amp;rsquo;s a good way to say thanks.
If you want to reach out to me, check the footer of this website or head yourself to the About page.</description>
    </item>
    
  </channel>
</rss>